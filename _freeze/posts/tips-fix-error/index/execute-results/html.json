{
  "hash": "0c3f70749afb06553e12fa791dfa7ef4",
  "result": {
    "markdown": "---\ntitle: \"Stuck in an error message? Let me help you fix it!\"\nauthor: \"Flávia E. Rius\"\ndate: '2022-06-14'\ntoc: true\ncategories: [data science, R, error]\n---\n\n\nThis is for R beginners, or even intermediate and advanced users who want a different perspective about how to debug errors in R.\n\n\n~~Always~~ Sometimes you face errors in R, it is unavoidable. I will give you three different tools to debug the errors on your own, and avoid getting stuck not knowing what to do.\n\n### 1. Look for typos in your code. \nAs simple as that. Very often they are the origin of the error message. \n       A parentheses missing, or in the wrong place, same as a comma, can change R interpretation and lead to different errors. \n       Same if you add the wrong variable name.\n       \n\n::: {.cell}\n\n```{.r .cell-code}\n# For example, forgetting a {\n\nfor(y in 1:10) {\n if(y > 2) {\n   print(paste(y, \"is bigger than 2.\"))\n }\n  else {\n    print(paste(y, \"is not bigger than 2.\"))\n  #### It should be here ####\n}\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:12:0: unexpected end of input\n10: }\n11: \n   ^\n```\n:::\n:::\n\n\n\n### 2. Use the great question mark tool in R to access what the function does. \n  By typing ?[function], you will be able to see a help page, very often well described. \n  Such as:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<!DOCTYPE html><html><head><title>R: Arithmetic Mean</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.css\">\n<script type=\"text/javascript\">\nconst macros = { \"\\\\R\": \"\\\\textsf{R}\", \"\\\\code\": \"\\\\texttt\"};\nfunction processMathHTML() {\n    var l = document.getElementsByClassName('reqn');\n    for (let e of l) { katex.render(e.textContent, e, { throwOnError: false, macros }); }\n    return;\n}</script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js\"\n    onload=\"processMathHTML();\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"R.css\" />\n</head><body><div class=\"container\">\n\n<table style=\"width: 100%;\"><tr><td>mean</td><td style=\"text-align: right;\">R Documentation</td></tr></table>\n\n<h2 id='mean'>Arithmetic Mean</h2>\n\n<h3>Description</h3>\n\n<p>Generic function for the (trimmed) arithmetic mean.\n</p>\n\n\n<h3>Usage</h3>\n\n<pre><code class='language-R'>mean(x, ...)\n\n## Default S3 method:\nmean(x, trim = 0, na.rm = FALSE, ...)\n</code></pre>\n\n\n<h3>Arguments</h3>\n\n<table>\n<tr><td><code id=\"mean_:_x\">x</code></td>\n<td>\n<p>An <span class=\"rlang\"><b>R</b></span> object.  Currently there are methods for\nnumeric/logical vectors and date,\ndate-time and time interval objects.  Complex vectors\nare allowed for <code>trim = 0</code>, only.</p>\n</td></tr>\n<tr><td><code id=\"mean_:_trim\">trim</code></td>\n<td>\n<p>the fraction (0 to 0.5) of observations to be\ntrimmed from each end of <code>x</code> before the mean is computed.\nValues of trim outside that range are taken as the nearest endpoint.\n</p>\n</td></tr>\n<tr><td><code id=\"mean_:_na.rm\">na.rm</code></td>\n<td>\n<p>a logical evaluating to <code>TRUE</code> or <code>FALSE</code>\nindicating whether <code>NA</code> values should be stripped before the\ncomputation proceeds.</p>\n</td></tr> \n<tr><td><code id=\"mean_:_...\">...</code></td>\n<td>\n<p>further arguments passed to or from other methods.</p>\n</td></tr>\n</table>\n\n\n<h3>Value</h3>\n\n<p>If <code>trim</code> is zero (the default), the arithmetic mean of the\nvalues in <code>x</code> is computed, as a numeric or complex vector of\nlength one.  If <code>x</code> is not logical (coerced to numeric), numeric\n(including integer) or complex, <code>NA_real_</code> is returned, with a warning.\n</p>\n<p>If <code>trim</code> is non-zero, a symmetrically trimmed mean is computed\nwith a fraction of <code>trim</code> observations deleted from each end\nbefore the mean is computed.\n</p>\n\n\n<h3>References</h3>\n\n<p>Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988)\n<em>The New S Language</em>.\nWadsworth &amp; Brooks/Cole.\n</p>\n\n\n<h3>See Also</h3>\n\n<p><code>weighted.mean</code>, <code>mean.POSIXct</code>,\n<code>colMeans</code> for row and column means.\n</p>\n\n\n<h3>Examples</h3>\n\n<pre><code class='language-R'>x &lt;- c(0:10, 50)\nxm &lt;- mean(x)\nc(xm, mean(x, trim = 0.10))\n</code></pre>\n\n\n</div>\n</body></html>\n```\n:::\n:::\n\n\n\n\n   When you get errors of type: you are inserting a data frame when it should be a numeric vector, for example, you will be able to find this out by reading each parameter of a function in this help document. And pay attention to the specification of __class__ of the vector you should add to each argument of your function. In our example here, x should be an _R object_ of classes _numeric_, _logical_, _date_, _date-time_ or _time interval_.\n       \nAlso, looking at the __examples__ could be the best way to figure out how a function works. Testing this example and exploring the output is a great way to figure out which class or shape you need for the function too, because sometimes this is not so well documented. You may need unique values or a numeric instead of factor (this happens often for statistical functions). \n       \nUse the trial and error technique. \n       \n__Apply__ what you have read and what you think you have understood by the help page in your code to see if that is really it. Even to a smaller piece of your dataset, so it don't take too long to run. This is very important for understanding better the functions and reach what you want. See the output of the example and compare it to the one using your data.\n\n### 3. Google the error message. \n\nIf none of the alternatives above works, just go and [Google](https://www.google.com/) it.\n\nYou will find answers in [stackoverflow](https://stackoverflow.com/), [GitHub issues](https://github.com/tidyverse/ggplot2/issues), and blog posts, [R forums](https://community.rstudio.com/), among other vehicles of information. Read all of the answers, not just the first one, and the comments too. This increases the chance for you to find that piece of information you need.\n\nSometimes you need to install an additional package or extension to your OS in order to fix the error. And that is fine. \n       \nAlmost always someone has already encounter the same error as you, and the coding community is so awesome that they help anyone with a doubt, and this stays fixed in the forums.\n\n  If you don’t find your question or any similar in the forum, ask it yourself. In stackoverflow, don’t forget to read the code of conduct and __post a reproducible example__ so the community can help you better. This allows other people to reproduce your error locally and figure out how to fix it.\n\n### Bonus! \n If you’re feeling lazy, skip the first two steps and __Google the error message right away__. \n\nYou may find the answer easily, or find a long blog post with details hard to understand when you are a beginner. \n \nWhen the documentation for help in R is lacking information, this is better, but to know that you would need to meet the previous step which is looking for the R help message.\n\nYou are free to decide which path to follow.\n\nI hope these tips help you in your R journey. \n\nFeel free to contact me if you find that useful, I will love to hear from you! \n\nBest of luck!\n\nFlávia",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}